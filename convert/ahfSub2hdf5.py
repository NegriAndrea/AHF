#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import numpy as np
import h5py
from pathlib import PurePath
import argparse

def readConvert(filename):
    """
    Extract from a single AHF substructure file all the data, returns numpy
    arrays.

    """

    # read all the file in one shot
    with open(filename, 'r') as sub:
        Lines = sub.readlines()

    # The txt file is structured like this:
    #
    # HostID1 Nsub1
    # SubID1 SubID2 SubID3
    #

    assert len(Lines) % 2 == 0
    Nhaloes = len(Lines)//2
    IDhaloes = np.zeros(Nhaloes, dtype=np.uint64)
    Nsubhaloes_perHalo = np.zeros_like(IDhaloes)
    subhaloesID = []

    for i, ll in enumerate(Lines):
        # all the number are assumed to be np.uint64 like in AHF
        line_split = np.array(ll.strip().split(), dtype=np.uint64)

        if i % 2 == 0:
            assert line_split.size == 2
            IDhaloes[i//2] = line_split[0]
            Nsubhaloes_perHalo[i//2] = line_split[1]
        else:
            assert line_split.size == Nsubhaloes_perHalo[(i-1)//2]
            subhaloesID.append(line_split)

    subhaloesID = np.concatenate(subhaloesID)
    assert subhaloesID.size == Nsubhaloes_perHalo.sum()

    off = np.zeros_like(Nsubhaloes_perHalo)
    off[1:] = np.cumsum(Nsubhaloes_perHalo[:-1])

    return IDhaloes, Nsubhaloes_perHalo, subhaloesID, off


parser = argparse.ArgumentParser(description='Convert the AHF ASCII,'
        ' substructure file in a single hdf5')

parser.add_argument('filename', type=str,
        help='Filename of the table to process, or ending part of the filename'
        ' is -n is active')

parser.add_argument('-n', type=int,
        help='Number of files to read for a table generated by AHF with MPI')

parser.add_argument('-o', action='store_true',
        help='overwrite output files')

parser.add_argument('-v', help='verbose output',
        action='store_true')

parser.add_argument('--ignore-missing', action='store_true',
        help='Do not check if all the files are there in case of multiple files')

args = parser.parse_args()

if args.n is None:
    filename = args.filename
    Nfiles = 1
else:
    # for parallel run, the format of the filename is different
    nameParts = PurePath(args.filename).name.split('.')
    # filename = str(PurePath(args.filename).parent/(nameParts[0]+'.0000.'+'.'.join(nameParts[2:])))

    Nfiles = args.n
    n = len(list(Path(PurePath(args.filename).parent).glob(
        nameParts[0]+'.????.'+'.'.join(nameParts[2:]))))

    if not args.ignore_missing:
        if n != Nfiles:
            raise ValueError('Number of files does not match with -n')

IDhaloesL = []
Nsubhaloes_perHaloL = []
subhaloesIDL = []
offL = []

for i in range(Nfiles):

    if args.n is None:
        filename = args.filename
        Nfiles = 1
    else:
        if args.v:
            print('reading ', i)

        nameParts = PurePath(args.filename).name.split('.')
        filename = str(PurePath(args.filename).parent/(
                nameParts[0]+'.'+str(i).zfill(4)+'.'+'.'.join(nameParts[2:])))

    IDhaloes, Nsubhaloes_perHalo, subhaloesID, off = readConvert(filename)

    IDhaloesL.append(IDhaloes)
    Nsubhaloes_perHaloL.append(Nsubhaloes_perHalo)
    subhaloesIDL.append(subhaloesID)
    offL.append(off)

    del IDhaloes, Nsubhaloes_perHalo, subhaloesID, off

IDhaloesL = np.concatenate(IDhaloesL)
Nsubhaloes_perHaloL = np.concatenate(Nsubhaloes_perHaloL)
subhaloesIDL = np.concatenate(subhaloesIDL)
offL = np.concatenate(offL)


if args.n is None:
    # serial run of AHF
    outname = args.filename+'.h5'
else:
    outname = str(PurePath(args.filename).parent/(
                nameParts[0]+'.'+'.'.join(nameParts[2:])))+'.h5'

if args.v:
    print('writing ', outname)


if args.o:
    writeMode = 'w'
else:
    writeMode = 'w-'

# save everything
with h5py.File(outname, writeMode) as h5f:
    h5f['IDhaloes'] = IDhaloesL
    h5f['Nsub_perHalo'] = Nsubhaloes_perHaloL
    h5f['subhaloesID'] = subhaloesIDL
    h5f['off'] = offL
